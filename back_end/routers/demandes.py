from fastapi import APIRouter, Depends, HTTPException, Header
from sqlalchemy.orm import Session
from typing import List
import sqlite3
from database import get_db
from models import User, Demande
from schemas import Demande as DemandeSchema, DemandeCreate, DemandeUpdate

from fastapi import APIRouter, Depends, HTTPException, Header
from sqlalchemy.orm import Session
from typing import List, Optional
import sqlite3
from database import get_db
from models import User, Demande
from schemas import Demande as DemandeSchema, DemandeCreate, DemandeUpdate

router = APIRouter(prefix="/demandes", tags=["Demandes"])

def get_sqlite_connection():
    """Obtenir une connexion √† la base de donn√©es SQLite"""
    conn = sqlite3.connect('gestion_db.db')
    conn.row_factory = sqlite3.Row  # Pour acc√©der aux colonnes par nom
    return conn

def get_current_user_from_token(authorization: str = Header(None)):
    """Extraire l'utilisateur actuel depuis le token d'autorisation"""
    if not authorization or not authorization.startswith("Bearer "):
        raise HTTPException(status_code=401, detail="Token manquant")

    token = authorization.replace("Bearer ", "")
    print(f"üîç [DEBUG] Token re√ßu: '{token}'")

    # Le token a le format: test_token_{user_id}_{role}
    if token.startswith("test_token_"):
        parts = token.split("_")
        print(f"üîç [DEBUG] Token parts: {parts}")
        if len(parts) >= 3:
            user_id = parts[2]
            role = parts[3] if len(parts) > 3 else ""
            print(f"üîç [DEBUG] Recherche user_id={user_id}, role={role}")

            # V√©rifier d'abord dans la base de donn√©es SQLite
            try:
                conn = get_sqlite_connection()
                cursor = conn.cursor()
                cursor.execute("SELECT * FROM users WHERE id = ? AND role = ? AND is_active = 1", (user_id, role.upper()))
                user_data = cursor.fetchone()
                conn.close()

                if user_data:
                    print(f"‚úÖ [DEBUG] Utilisateur trouv√© dans SQLite: {user_data['email']}")
                    return dict(user_data)
                else:
                    print(f"‚ùå [DEBUG] Utilisateur non trouv√© dans SQLite avec id={user_id}, role={role.upper()}")

            except Exception as e:
                print(f"‚ùå [DEBUG] Erreur lors de la r√©cup√©ration de l'utilisateur: {e}")

            # Fallback vers TEST_USERS pour compatibilit√©
            try:
                # Importer les donn√©es de test directement
                DEFAULT_TEST_USERS = {
                    "admin@univ.ma": {
                        "id": 1,
                        "email": "admin@univ.ma",
                        "password": "admin2024",
                        "nom": "Alami",
                        "prenom": "Hassan",
                        "role": "admin"
                    },
                    "secretaire@univ.ma": {
                        "id": 2,
                        "email": "secretaire@univ.ma",
                        "password": "secretaire2024",
                        "nom": "Benali",
                        "prenom": "Fatima",
                        "role": "secretaire"
                    },
                    "enseignant@univ.ma": {
                        "id": 3,
                        "email": "enseignant@univ.ma",
                        "password": "enseignant2024",
                        "nom": "Tazi",
                        "prenom": "Ahmed",
                        "role": "enseignant"
                    },
                    "fonctionnaire@univ.ma": {
                        "id": 4,
                        "email": "fonctionnaire@univ.ma",
                        "password": "fonction2024",
                        "nom": "Karam",
                        "prenom": "Aicha",
                        "role": "fonctionnaire"
                    }
                }
                
                print(f"üîÑ [DEBUG] Recherche dans TEST_USERS...")
                for email, user_data in DEFAULT_TEST_USERS.items():
                    print(f"üîç [DEBUG] Comparaison: TEST_USERS[{email}] id={user_data['id']}, role={user_data['role']}")
                    if str(user_data["id"]) == user_id and user_data["role"].upper() == role.upper():
                        print(f"‚úÖ [DEBUG] Utilisateur trouv√© dans TEST_USERS: {email}")
                        # Ajouter les champs manquants pour la compatibilit√©
                        return {
                            "id": user_data["id"],
                            "email": user_data["email"],
                            "nom": user_data["nom"],
                            "prenom": user_data["prenom"],
                            "role": user_data["role"].upper(),
                            "is_active": True,
                            "created_at": "2025-01-01 00:00:00",
                            "telephone": "",
                            "adresse": "",
                            "cin": ""
                        }
                print(f"‚ùå [DEBUG] Utilisateur non trouv√© dans TEST_USERS")
            except Exception as e:
                print(f"‚ùå [DEBUG] Erreur lors de la v√©rification dans TEST_USERS: {e}")

    print(f"‚ùå [DEBUG] Token invalide final")
    raise HTTPException(status_code=401, detail="Token invalide")

@router.post("/", response_model=DemandeSchema)
async def create_demande(
    demande: DemandeCreate,
    authorization: str = Header(None)
):
    """Cr√©er une nouvelle demande"""
    current_user = get_current_user_from_token(authorization)

    try:
        conn = get_sqlite_connection()
        cursor = conn.cursor()

        # Ins√©rer la nouvelle demande
        cursor.execute('''
            INSERT INTO demandes (user_id, type_demande, titre, description, date_debut, date_fin, statut, created_at)
            VALUES (?, ?, ?, ?, ?, ?, 'EN_ATTENTE', datetime('now'))
        ''', (
            current_user["id"],
            demande.type_demande.value if hasattr(demande.type_demande, 'value') else str(demande.type_demande),
            demande.titre,
            demande.description,
            demande.date_debut,
            demande.date_fin
        ))

        demande_id = cursor.lastrowid
        conn.commit()

        # R√©cup√©rer la demande cr√©√©e avec les informations utilisateur
        cursor.execute('''
            SELECT d.*, u.nom, u.prenom, u.email, u.role, u.is_active, u.created_at as user_created_at
            FROM demandes d
            JOIN users u ON d.user_id = u.id
            WHERE d.id = ?
        ''', (demande_id,))

        demande_data = cursor.fetchone()
        conn.close()

        return {
            "id": demande_data["id"],
            "user_id": demande_data["user_id"],
            "type_demande": demande_data["type_demande"],
            "titre": demande_data["titre"],
            "description": demande_data["description"] or "",
            "date_debut": demande_data["date_debut"],
            "date_fin": demande_data["date_fin"],
            "statut": demande_data["statut"],
            "commentaire_admin": demande_data["commentaire_admin"] or "",
            "created_at": demande_data["created_at"],
            "updated_at": demande_data["updated_at"],
            "user": {
                "id": demande_data["user_id"],
                "nom": demande_data["nom"],
                "prenom": demande_data["prenom"],
                "email": demande_data["email"],
                "role": demande_data["role"],
                "is_active": bool(demande_data["is_active"]),
                "created_at": demande_data["user_created_at"] or "2025-01-01T00:00:00"
            }
        }

    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Erreur lors de la cr√©ation: {str(e)}")

# Endpoint sp√©cialis√© pour les demandes d'attestation
@router.post("/attestation", response_model=DemandeSchema)
async def create_demande_attestation(
    titre: str,
    description: Optional[str] = None,
    authorization: str = Header(None)
):
    """Cr√©er une demande d'attestation"""
    current_user = get_current_user_from_token(authorization)

    try:
        conn = get_sqlite_connection()
        cursor = conn.cursor()

        cursor.execute('''
            INSERT INTO demandes (user_id, type_demande, titre, description, statut, created_at)
            VALUES (?, 'ATTESTATION', ?, ?, 'EN_ATTENTE', datetime('now'))
        ''', (current_user["id"], titre, description))

        demande_id = cursor.lastrowid
        conn.commit()

        # R√©cup√©rer la demande cr√©√©e
        cursor.execute('''
            SELECT d.*, u.nom, u.prenom, u.email, u.role
            FROM demandes d
            JOIN users u ON d.user_id = u.id
            WHERE d.id = ?
        ''', (demande_id,))

        demande_data = cursor.fetchone()
        conn.close()

        return {
            "id": demande_data["id"],
            "user_id": demande_data["user_id"],
            "type_demande": demande_data["type_demande"],
            "titre": demande_data["titre"],
            "description": demande_data["description"],
            "date_debut": demande_data["date_debut"],
            "date_fin": demande_data["date_fin"],
            "statut": demande_data["statut"],
            "commentaire_admin": demande_data["commentaire_admin"],
            "created_at": demande_data["created_at"],
            "updated_at": demande_data["updated_at"],
            "user": {
                "id": demande_data["user_id"],
                "nom": demande_data["nom"],
                "prenom": demande_data["prenom"],
                "email": demande_data["email"],
                "role": demande_data["role"]
            }
        }

    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Erreur lors de la cr√©ation: {str(e)}")

# Endpoint sp√©cialis√© pour les demandes d'ordre de mission
@router.post("/ordre-mission", response_model=DemandeSchema)
async def create_demande_ordre_mission(
    titre: str,
    description: Optional[str] = None,
    date_debut: Optional[str] = None,
    date_fin: Optional[str] = None,
    authorization: str = Header(None)
):
    """Cr√©er une demande d'ordre de mission"""
    current_user = get_current_user_from_token(authorization)

    try:
        conn = get_sqlite_connection()
        cursor = conn.cursor()

        cursor.execute('''
            INSERT INTO demandes (user_id, type_demande, titre, description, date_debut, date_fin, statut, created_at)
            VALUES (?, 'ORDRE_MISSION', ?, ?, ?, ?, 'EN_ATTENTE', datetime('now'))
        ''', (current_user["id"], titre, description, date_debut, date_fin))

        demande_id = cursor.lastrowid
        conn.commit()

        # R√©cup√©rer la demande cr√©√©e
        cursor.execute('''
            SELECT d.*, u.nom, u.prenom, u.email, u.role
            FROM demandes d
            JOIN users u ON d.user_id = u.id
            WHERE d.id = ?
        ''', (demande_id,))

        demande_data = cursor.fetchone()
        conn.close()

        return {
            "id": demande_data["id"],
            "user_id": demande_data["user_id"],
            "type_demande": demande_data["type_demande"],
            "titre": demande_data["titre"],
            "description": demande_data["description"],
            "date_debut": demande_data["date_debut"],
            "date_fin": demande_data["date_fin"],
            "statut": demande_data["statut"],
            "commentaire_admin": demande_data["commentaire_admin"],
            "created_at": demande_data["created_at"],
            "updated_at": demande_data["updated_at"],
            "user": {
                "id": demande_data["user_id"],
                "nom": demande_data["nom"],
                "prenom": demande_data["prenom"],
                "email": demande_data["email"],
                "role": demande_data["role"]
            }
        }

    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Erreur lors de la cr√©ation: {str(e)}")

# Endpoint sp√©cialis√© pour les demandes d'heures suppl√©mentaires
@router.post("/heures-sup", response_model=DemandeSchema)
async def create_demande_heures_sup(
    titre: str,
    description: Optional[str] = None,
    date_debut: Optional[str] = None,
    date_fin: Optional[str] = None,
    authorization: str = Header(None)
):
    """Cr√©er une demande d'heures suppl√©mentaires"""
    current_user = get_current_user_from_token(authorization)

    try:
        conn = get_sqlite_connection()
        cursor = conn.cursor()

        cursor.execute('''
            INSERT INTO demandes (user_id, type_demande, titre, description, date_debut, date_fin, statut, created_at)
            VALUES (?, 'HEURES_SUP', ?, ?, ?, ?, 'EN_ATTENTE', datetime('now'))
        ''', (current_user["id"], titre, description, date_debut, date_fin))

        demande_id = cursor.lastrowid
        conn.commit()

        # R√©cup√©rer la demande cr√©√©e
        cursor.execute('''
            SELECT d.*, u.nom, u.prenom, u.email, u.role
            FROM demandes d
            JOIN users u ON d.user_id = u.id
            WHERE d.id = ?
        ''', (demande_id,))

        demande_data = cursor.fetchone()
        conn.close()

        return {
            "id": demande_data["id"],
            "user_id": demande_data["user_id"],
            "type_demande": demande_data["type_demande"],
            "titre": demande_data["titre"],
            "description": demande_data["description"],
            "date_debut": demande_data["date_debut"],
            "date_fin": demande_data["date_fin"],
            "statut": demande_data["statut"],
            "commentaire_admin": demande_data["commentaire_admin"],
            "created_at": demande_data["created_at"],
            "updated_at": demande_data["updated_at"],
            "user": {
                "id": demande_data["user_id"],
                "nom": demande_data["nom"],
                "prenom": demande_data["prenom"],
                "email": demande_data["email"],
                "role": demande_data["role"]
            }
        }

    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Erreur lors de la cr√©ation: {str(e)}")

@router.get("/", response_model=List[DemandeSchema])
async def get_demandes(
    skip: int = 0,
    limit: int = 100,
    authorization: str = Header(None)
):
    """R√©cup√©rer les demandes selon le r√¥le de l'utilisateur"""
    current_user = get_current_user_from_token(authorization)

    try:
        conn = get_sqlite_connection()
        cursor = conn.cursor()

        if current_user["role"] in ["ADMIN", "SECRETAIRE"]:
            # Admin et secr√©taire voient toutes les demandes
            cursor.execute('''
                SELECT d.*, u.nom, u.prenom, u.email, u.role
                FROM demandes d
                JOIN users u ON d.user_id = u.id
                ORDER BY d.created_at DESC
                LIMIT ? OFFSET ?
            ''', (limit, skip))
        else:
            # Utilisateurs normaux voient seulement leurs demandes
            cursor.execute('''
                SELECT d.*, u.nom, u.prenom, u.email, u.role
                FROM demandes d
                JOIN users u ON d.user_id = u.id
                WHERE d.user_id = ?
                ORDER BY d.created_at DESC
                LIMIT ? OFFSET ?
            ''', (current_user["id"], limit, skip))

        demandes_data = cursor.fetchall()
        conn.close()

        demandes_list = []
        for demande in demandes_data:
            demandes_list.append({
                "id": demande["id"],
                "user_id": demande["user_id"],
                "type_demande": demande["type_demande"],
                "titre": demande["titre"],
                "description": demande["description"],
                "date_debut": demande["date_debut"],
                "date_fin": demande["date_fin"],
                "statut": demande["statut"],
                "commentaire_admin": demande["commentaire_admin"],
                "created_at": demande["created_at"],
                "updated_at": demande["updated_at"],
                "user": {
                    "id": demande["user_id"],
                    "nom": demande["nom"],
                    "prenom": demande["prenom"],
                    "email": demande["email"],
                    "role": demande["role"]
                }
            })

        return demandes_list

    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Erreur lors de la r√©cup√©ration: {str(e)}")

@router.get("/user/me", response_model=List[DemandeSchema])
async def get_my_demandes(
    skip: int = 0,
    limit: int = 100,
    authorization: str = Header(None)
):
    """R√©cup√©rer les demandes de l'utilisateur connect√©"""
    current_user = get_current_user_from_token(authorization)

    try:
        conn = get_sqlite_connection()
        cursor = conn.cursor()

        # R√©cup√©rer seulement les demandes de l'utilisateur connect√©
        cursor.execute('''
            SELECT d.*, u.nom, u.prenom, u.email, u.role, u.is_active, u.created_at as user_created_at
            FROM demandes d
            JOIN users u ON d.user_id = u.id
            WHERE d.user_id = ?
            ORDER BY d.created_at DESC
            LIMIT ? OFFSET ?
        ''', (current_user["id"], limit, skip))

        demandes_data = cursor.fetchall()
        conn.close()

        demandes_list = []
        for demande in demandes_data:
            demandes_list.append({
                "id": demande["id"],
                "user_id": demande["user_id"],
                "type_demande": demande["type_demande"],
                "titre": demande["titre"],
                "description": demande["description"],
                "date_debut": demande["date_debut"],
                "date_fin": demande["date_fin"],
                "statut": demande["statut"],
                "commentaire_admin": demande["commentaire_admin"],
                "created_at": demande["created_at"],
                "updated_at": demande["updated_at"],
                "user": {
                    "id": demande["user_id"],
                    "nom": demande["nom"],
                    "prenom": demande["prenom"],
                    "email": demande["email"],
                    "role": demande["role"],
                    "is_active": bool(demande["is_active"]),
                    "created_at": demande["user_created_at"] or "2025-01-01T00:00:00"
                }
            })

        return demandes_list

    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Erreur lors de la r√©cup√©ration: {str(e)}")

@router.get("/{demande_id}", response_model=DemandeSchema)
async def get_demande(
    demande_id: int,
    authorization: str = Header(None)
):
    """R√©cup√©rer une demande sp√©cifique"""
    current_user = get_current_user_from_token(authorization)

    try:
        conn = get_sqlite_connection()
        cursor = conn.cursor()

        cursor.execute('''
            SELECT d.*, u.nom, u.prenom, u.email, u.role
            FROM demandes d
            JOIN users u ON d.user_id = u.id
            WHERE d.id = ?
        ''', (demande_id,))

        demande_data = cursor.fetchone()
        conn.close()

        if not demande_data:
            raise HTTPException(status_code=404, detail="Demande non trouv√©e")

        # V√©rifier les permissions
        if current_user["role"] not in ["ADMIN", "SECRETAIRE"] and demande_data["user_id"] != current_user["id"]:
            raise HTTPException(status_code=403, detail="Acc√®s refus√©")

        return {
            "id": demande_data["id"],
            "user_id": demande_data["user_id"],
            "type_demande": demande_data["type_demande"],
            "titre": demande_data["titre"],
            "description": demande_data["description"],
            "date_debut": demande_data["date_debut"],
            "date_fin": demande_data["date_fin"],
            "statut": demande_data["statut"],
            "commentaire_admin": demande_data["commentaire_admin"],
            "created_at": demande_data["created_at"],
            "updated_at": demande_data["updated_at"],
            "user": {
                "id": demande_data["user_id"],
                "nom": demande_data["nom"],
                "prenom": demande_data["prenom"],
                "email": demande_data["email"],
                "role": demande_data["role"]
            }
        }

    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Erreur lors de la r√©cup√©ration: {str(e)}")

@router.put("/{demande_id}", response_model=DemandeSchema)
async def update_demande(
    demande_id: int,
    demande_update: DemandeUpdate,
    authorization: str = Header(None)
):
    """Mettre √† jour une demande"""
    current_user = get_current_user_from_token(authorization)

    try:
        conn = get_sqlite_connection()
        cursor = conn.cursor()

        # V√©rifier que la demande existe
        cursor.execute("SELECT user_id FROM demandes WHERE id = ?", (demande_id,))
        demande_data = cursor.fetchone()
        if not demande_data:
            raise HTTPException(status_code=404, detail="Demande non trouv√©e")

        # V√©rifier les permissions
        if current_user["role"] not in ["ADMIN", "SECRETAIRE"] and demande_data["user_id"] != current_user["id"]:
            raise HTTPException(status_code=403, detail="Acc√®s refus√©")

        # Seuls admin et secr√©taire peuvent changer le statut
        if demande_update.statut and current_user["role"] not in ["ADMIN", "SECRETAIRE"]:
            raise HTTPException(status_code=403, detail="Seuls les administrateurs peuvent changer le statut")

        # Pr√©parer les mises √† jour
        updates = []
        params = []

        if demande_update.titre is not None:
            updates.append("titre = ?")
            params.append(demande_update.titre)
        if demande_update.description is not None:
            updates.append("description = ?")
            params.append(demande_update.description)
        if demande_update.date_debut is not None:
            updates.append("date_debut = ?")
            params.append(demande_update.date_debut)
        if demande_update.date_fin is not None:
            updates.append("date_fin = ?")
            params.append(demande_update.date_fin)
        if demande_update.statut is not None:
            updates.append("statut = ?")
            params.append(demande_update.statut.value if hasattr(demande_update.statut, 'value') else str(demande_update.statut))
        if demande_update.commentaire_admin is not None:
            updates.append("commentaire_admin = ?")
            params.append(demande_update.commentaire_admin)

        if updates:
            updates.append("updated_at = datetime('now')")
            params.append(demande_id)

            cursor.execute(f"UPDATE demandes SET {', '.join(updates)} WHERE id = ?", params)
            conn.commit()

        # R√©cup√©rer la demande mise √† jour
        cursor.execute('''
            SELECT d.*, u.nom, u.prenom, u.email, u.role
            FROM demandes d
            JOIN users u ON d.user_id = u.id
            WHERE d.id = ?
        ''', (demande_id,))

        updated_data = cursor.fetchone()
        conn.close()

        return {
            "id": updated_data["id"],
            "user_id": updated_data["user_id"],
            "type_demande": updated_data["type_demande"],
            "titre": updated_data["titre"],
            "description": updated_data["description"],
            "date_debut": updated_data["date_debut"],
            "date_fin": updated_data["date_fin"],
            "statut": updated_data["statut"],
            "commentaire_admin": updated_data["commentaire_admin"],
            "created_at": updated_data["created_at"],
            "updated_at": updated_data["updated_at"],
            "user": {
                "id": updated_data["user_id"],
                "nom": updated_data["nom"],
                "prenom": updated_data["prenom"],
                "email": updated_data["email"],
                "role": updated_data["role"]
            }
        }

    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Erreur lors de la mise √† jour: {str(e)}")

@router.delete("/{demande_id}")
async def delete_demande(
    demande_id: int,
    authorization: str = Header(None)
):
    """Supprimer une demande"""
    current_user = get_current_user_from_token(authorization)

    try:
        conn = get_sqlite_connection()
        cursor = conn.cursor()

        # V√©rifier que la demande existe
        cursor.execute("SELECT user_id FROM demandes WHERE id = ?", (demande_id,))
        demande_data = cursor.fetchone()
        if not demande_data:
            raise HTTPException(status_code=404, detail="Demande non trouv√©e")

        # V√©rifier les permissions
        if current_user["role"] not in ["ADMIN", "SECRETAIRE"] and demande_data["user_id"] != current_user["id"]:
            raise HTTPException(status_code=403, detail="Acc√®s refus√©")

        cursor.execute("DELETE FROM demandes WHERE id = ?", (demande_id,))
        conn.commit()
        conn.close()

        return {"message": "Demande supprim√©e avec succ√®s"}

    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Erreur lors de la suppression: {str(e)}")
