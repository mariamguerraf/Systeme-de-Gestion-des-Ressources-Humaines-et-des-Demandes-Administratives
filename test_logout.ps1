# Test de D√©connexion - Syst√®me Universitaire
# Ce script teste le bon fonctionnement de la d√©connexion pour tous les r√¥les

Write-Host "üîê TEST DE DECONNEXION - SYSTEME UNIVERSITAIRE" -ForegroundColor Cyan
Write-Host "=================================================" -ForegroundColor Cyan

# Configuration
$API_URL = "http://localhost:8000"
$FRONTEND_URL = "http://localhost:5173"

# Comptes de test
$accounts = @(
    @{ email = "admin@univ.ma"; password = "admin2024"; role = "admin"; dashboard = "/cadmin/dashboard" },
    @{ email = "secretaire@univ.ma"; password = "secretaire2024"; role = "secretaire"; dashboard = "/secretaire/dashboard" },
    @{ email = "enseignant@univ.ma"; password = "enseignant2024"; role = "enseignant"; dashboard = "/enseignant/profil" },
    @{ email = "fonctionnaire@univ.ma"; password = "fonction2024"; role = "fonctionnaire"; dashboard = "/fonctionnaire/profil" }
)

function Test-BackendHealth {
    Write-Host "`nüè• V√©rification de l'√©tat du backend..." -ForegroundColor Yellow
    try {
        $response = Invoke-RestMethod -Uri "$API_URL/health" -Method Get -TimeoutSec 5
        Write-Host "‚úÖ Backend accessible: $($response.status)" -ForegroundColor Green
        return $true
    }
    catch {
        Write-Host "‚ùå Backend inaccessible: $_" -ForegroundColor Red
        return $false
    }
}

function Test-Login {
    param($Email, $Password, $ExpectedRole)
    
    Write-Host "`nüîë Test de connexion pour $Email ($ExpectedRole)..." -ForegroundColor Yellow
    
    try {
        # Pr√©parer les donn√©es de connexion
        $body = @{
            username = $Email
            password = $Password
        }
        
        # Connexion
        $loginResponse = Invoke-RestMethod -Uri "$API_URL/auth/login" -Method Post -Body $body -TimeoutSec 10
        
        if (-not $loginResponse.access_token) {
            throw "Aucun token re√ßu"
        }
        
        Write-Host "‚úÖ Token re√ßu: $($loginResponse.access_token.Substring(0, 20))..." -ForegroundColor Green
        
        # V√©rifier les informations utilisateur
        $headers = @{ Authorization = "Bearer $($loginResponse.access_token)" }
        $userResponse = Invoke-RestMethod -Uri "$API_URL/auth/me" -Method Get -Headers $headers -TimeoutSec 10
        
        if ($userResponse.role -ne $ExpectedRole) {
            throw "R√¥le incorrect: re√ßu '$($userResponse.role)', attendu '$ExpectedRole'"
        }
        
        Write-Host "‚úÖ Utilisateur authentifi√©: $($userResponse.prenom) $($userResponse.nom) ($($userResponse.role))" -ForegroundColor Green
        
        return @{
            success = $true
            token = $loginResponse.access_token
            user = $userResponse
        }
    }
    catch {
        Write-Host "‚ùå Erreur de connexion: $_" -ForegroundColor Red
        return @{ success = $false; error = $_ }
    }
}

function Test-TokenValidation {
    param($Token)
    
    Write-Host "`nüîç Validation du token..." -ForegroundColor Yellow
    
    try {
        $headers = @{ Authorization = "Bearer $Token" }
        $response = Invoke-RestMethod -Uri "$API_URL/auth/me" -Method Get -Headers $headers -TimeoutSec 10
        Write-Host "‚úÖ Token valide pour: $($response.prenom) $($response.nom)" -ForegroundColor Green
        return $true
    }
    catch {
        Write-Host "‚ùå Token invalide: $_" -ForegroundColor Red
        return $false
    }
}

function Show-LogoutInstructions {
    param($Role, $DashboardPath)
    
    Write-Host "`nüìã INSTRUCTIONS DE TEST MANUEL:" -ForegroundColor Cyan
    Write-Host "1. Ouvrez votre navigateur sur: $FRONTEND_URL$DashboardPath" -ForegroundColor White
    Write-Host "2. V√©rifiez que le dashboard s'affiche correctement" -ForegroundColor White
    Write-Host "3. Cherchez le bouton 'D√©connexion' (g√©n√©ralement en haut √† droite)" -ForegroundColor White
    Write-Host "4. Cliquez sur le bouton 'D√©connexion'" -ForegroundColor White
    Write-Host "5. V√©rifiez que vous √™tes redirig√© vers la page de connexion principale ($FRONTEND_URL/)" -ForegroundColor White
    Write-Host "6. V√©rifiez qu'un retour en arri√®re ne vous ram√®ne pas au dashboard" -ForegroundColor White
    Write-Host "7. Essayez d'acc√©der directement au dashboard - vous devez √™tre redirig√© vers la connexion" -ForegroundColor White
}

function Test-LogoutProcess {
    param($Account)
    
    Write-Host "`n" + "="*50 -ForegroundColor Cyan
    Write-Host "üß™ TEST DE D√âCONNEXION POUR: $($Account.role.ToUpper())" -ForegroundColor Cyan
    Write-Host "="*50 -ForegroundColor Cyan
    
    # √âtape 1: Connexion
    $loginResult = Test-Login -Email $Account.email -Password $Account.password -ExpectedRole $Account.role
    
    if (-not $loginResult.success) {
        Write-Host "‚ùå √âchec du test pour $($Account.role) - impossible de se connecter" -ForegroundColor Red
        return $false
    }
    
    # √âtape 2: Validation du token
    $tokenValid = Test-TokenValidation -Token $loginResult.token
    if (-not $tokenValid) {
        Write-Host "‚ùå √âchec du test pour $($Account.role) - token invalide" -ForegroundColor Red
        return $false
    }
    
    # √âtape 3: Instructions manuelles
    Show-LogoutInstructions -Role $Account.role -DashboardPath $Account.dashboard
    
    Write-Host "`n‚è≥ Appuyez sur ENTR√âE une fois que vous avez test√© la d√©connexion..." -ForegroundColor Yellow
    Read-Host
    
    # √âtape 4: V√©rification post-d√©connexion
    Write-Host "`nüîç V√©rification que le token n'est plus valide..." -ForegroundColor Yellow
    $tokenStillValid = Test-TokenValidation -Token $loginResult.token
    
    if ($tokenStillValid) {
        Write-Host "‚ö†Ô∏è  Le token semble encore valide c√¥t√© serveur - c'est normal si vous n'avez pas cliqu√© sur D√©connexion" -ForegroundColor Yellow
        Write-Host "   La d√©connexion c√¥t√© client supprime le token du localStorage" -ForegroundColor Yellow
    } else {
        Write-Host "‚úÖ Token invalid√© c√¥t√© serveur" -ForegroundColor Green
    }
    
    return $true
}

# Programme principal
Write-Host "`nüöÄ D√©marrage des tests de d√©connexion..." -ForegroundColor Green

# V√©rifier le backend
if (-not (Test-BackendHealth)) {
    Write-Host "`n‚ùå Le backend n'est pas accessible. Assurez-vous qu'il est d√©marr√© sur $API_URL" -ForegroundColor Red
    Write-Host "Utilisez: cd back_end && python main_minimal.py" -ForegroundColor Yellow
    exit 1
}

Write-Host "`nüìù Ce test va v√©rifier que:" -ForegroundColor Cyan
Write-Host "‚Ä¢ La connexion fonctionne pour chaque r√¥le" -ForegroundColor White
Write-Host "‚Ä¢ Le dashboard correct s'affiche" -ForegroundColor White
Write-Host "‚Ä¢ Le bouton de d√©connexion existe et fonctionne" -ForegroundColor White
Write-Host "‚Ä¢ La redirection vers la page de connexion s'effectue" -ForegroundColor White
Write-Host "‚Ä¢ Le token est supprim√© du localStorage" -ForegroundColor White

Write-Host "`n‚ö†Ô∏è  IMPORTANT: Assurez-vous que le frontend est d√©marr√© sur $FRONTEND_URL" -ForegroundColor Yellow
Write-Host "Utilisez: npm run dev" -ForegroundColor Yellow

Write-Host "`n‚ñ∂Ô∏è  Appuyez sur ENTR√âE pour commencer les tests..." -ForegroundColor Green
Read-Host

$testResults = @()

foreach ($account in $accounts) {
    $result = Test-LogoutProcess -Account $account
    $testResults += @{
        role = $account.role
        success = $result
    }
}

# R√©sum√© final
Write-Host "`n" + "="*60 -ForegroundColor Cyan
Write-Host "üìä R√âSUM√â DES TESTS DE D√âCONNEXION" -ForegroundColor Cyan
Write-Host "="*60 -ForegroundColor Cyan

foreach ($result in $testResults) {
    if ($result.success) {
        Write-Host "‚úÖ $($result.role.ToUpper()): Test termin√©" -ForegroundColor Green
    } else {
        Write-Host "‚ùå $($result.role.ToUpper()): √âchec du test" -ForegroundColor Red
    }
}

Write-Host "`nüéØ POINTS CL√âS √Ä V√âRIFIER:" -ForegroundColor Cyan
Write-Host "‚Ä¢ Le bouton 'D√©connexion' appelle bien logout() du contexte AuthContext" -ForegroundColor White
Write-Host "‚Ä¢ La fonction logout() supprime le token du localStorage" -ForegroundColor White
Write-Host "‚Ä¢ L'utilisateur est redirig√© vers '/' apr√®s d√©connexion" -ForegroundColor White
Write-Host "‚Ä¢ Le contexte d'authentification est r√©initialis√© (user = null)" -ForegroundColor White
Write-Host "‚Ä¢ Impossible de retourner au dashboard sans se reconnecter" -ForegroundColor White

Write-Host "`n‚úÖ Tests de d√©connexion termin√©s!" -ForegroundColor Green
Write-Host "üìÑ Pour un test interactif, ouvrez: test_logout.html" -ForegroundColor Yellow
